import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import sqlite3

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

ADMIN_ID = 7872701674

class Database:
    def __init__(self):
        self.conn = sqlite3.connect('applications.db', check_same_thread=False)
        self.create_tables()

    def create_tables(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS applications (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                username TEXT,
                name TEXT,
                age INTEGER,
                skills TEXT,
                experience_years TEXT,
                previous_experience TEXT,
                status TEXT DEFAULT 'pending',
                admin_reply TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        self.conn.commit()

    def add_application(self, user_id: int, username: str, name: str, age: int, 
                       skills: str, experience_years: str, previous_experience: str):
        cursor = self.conn.cursor()
        cursor.execute('''
            INSERT INTO applications 
            (user_id, username, name, age, skills, experience_years, previous_experience)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (user_id, username, name, age, skills, experience_years, previous_experience))
        self.conn.commit()
        return cursor.lastrowid

    def get_application(self, application_id: int):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM applications WHERE id = ?', (application_id,))
        return cursor.fetchone()

    def get_pending_applications(self):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM applications WHERE status = "pending" ORDER BY created_at DESC')
        return cursor.fetchall()

    def get_all_applications(self):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM applications ORDER BY created_at DESC')
        return cursor.fetchall()

    def update_application_status(self, application_id: int, status: str, admin_reply: str = None):
        cursor = self.conn.cursor()
        cursor.execute('''
            UPDATE applications 
            SET status = ?, admin_reply = ?
            WHERE id = ?
        ''', (status, admin_reply, application_id))
        self.conn.commit()

    def delete_application(self, application_id: int):
        cursor = self.conn.cursor()
        cursor.execute('DELETE FROM applications WHERE id = ?', (application_id,))
        self.conn.commit()

db = Database()
user_states = {}

def get_main_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="start_application")],
        [InlineKeyboardButton("–ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_applications")],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_admin_keyboard():
    keyboard = [
        [InlineKeyboardButton("–í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="admin_all_applications")],
        [InlineKeyboardButton("–û–∂–∏–¥–∞—é—â–∏–µ", callback_data="admin_pending_applications")],
        [InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_application_action_keyboard(application_id: int):
    keyboard = [
        [
            InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{application_id}"),
            InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{application_id}")
        ],
        [InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{application_id}")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="admin_all_applications")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_cancel_keyboard():
    keyboard = [
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id == ADMIN_ID:
        await update.message.reply_text("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=get_admin_keyboard())
    else:
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())

async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    await update.message.reply_text("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=get_admin_keyboard())

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data == "start_application":
        if user_id == ADMIN_ID:
            await query.edit_message_text("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏.")
            return
            
        user_states[user_id] = "waiting_name"
        await query.edit_message_text(
            "1. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
            reply_markup=get_cancel_keyboard()
        )
    
    elif data == "my_applications":
        await show_user_applications(update, context)
    
    elif data == "main_menu":
        if user_id == ADMIN_ID:
            await query.edit_message_text("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=get_admin_keyboard())
        else:
            await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())
    
    elif data == "cancel":
        if user_id in user_states:
            del user_states[user_id]
        await query.edit_message_text("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu_keyboard())
    
    elif data == "admin_all_applications":
        if user_id != ADMIN_ID:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return
        await show_all_applications(update, context)
    
    elif data == "admin_pending_applications":
        if user_id != ADMIN_ID:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return
        await show_pending_applications(update, context)
    
    elif data == "admin_stats":
        if user_id != ADMIN_ID:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return
        await show_stats(update, context)
    
    elif data.startswith("view_application_"):
        if user_id != ADMIN_ID:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return
        application_id = int(data.split("_")[2])
        await show_application_details(update, context, application_id)
    
    elif data.startswith("accept_"):
        if user_id != ADMIN_ID:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return
        application_id = int(data.split("_")[1])
        await accept_application(update, context, application_id)
    
    elif data.startswith("reject_"):
        if user_id != ADMIN_ID:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return
        application_id = int(data.split("_")[1])
        user_states[f"reject_{user_id}"] = application_id
        await query.edit_message_text(
            "–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"view_application_{application_id}")]])
        )
    
    elif data.startswith("reply_"):
        if user_id != ADMIN_ID:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return
        application_id = int(data.split("_")[1])
        user_states[f"reply_{user_id}"] = application_id
        await query.edit_message_text(
            "–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"view_application_{application_id}")]])
        )

async def show_user_applications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    
    applications = db.get_all_applications()
    user_applications = [app for app in applications if app[1] == user_id]
    
    if not user_applications:
        await query.edit_message_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–∞–Ω—ã—Ö –∑–∞—è–≤–æ–∫.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="start_application")]])
        )
        return
    
    text = "–í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n\n"
    for app in user_applications[:10]:
        status_emoji = "‚è≥" if app[8] == "pending" else "‚úÖ" if app[8] == "accepted" else "‚ùå"
        text += f"{status_emoji} –ó–∞—è–≤–∫–∞ #{app[0]} - {app[8]}\n"
        text += f"üìÖ {app[10]}\n\n"
    
    await query.edit_message_text(text, reply_markup=get_main_menu_keyboard())

async def show_all_applications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    applications = db.get_all_applications()
    
    if not applications:
        await query.edit_message_text("–ù–µ—Ç –∑–∞—è–≤–æ–∫.", reply_markup=get_admin_keyboard())
        return
    
    text = "–í—Å–µ –∑–∞—è–≤–∫–∏:\n\n"
    keyboard = []
    
    for app in applications[:15]:
        status_emoji = "‚è≥" if app[8] == "pending" else "‚úÖ" if app[8] == "accepted" else "‚ùå"
        text += f"{status_emoji} #{app[0]} - {app[3]} ({app[4]} –ª–µ—Ç) - {app[8]}\n"
        keyboard.append([InlineKeyboardButton(
            f"{status_emoji} #{app[0]} - {app[3]}", 
            callback_data=f"view_application_{app[0]}"
        )])
    
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")])
    
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

async def show_pending_applications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    applications = db.get_pending_applications()
    
    if not applications:
        await query.edit_message_text("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫.", reply_markup=get_admin_keyboard())
        return
    
    text = "–û–∂–∏–¥–∞—é—â–∏–µ –∑–∞—è–≤–∫–∏:\n\n"
    keyboard = []
    
    for app in applications[:15]:
        text += f"#{app[0]} - {app[3]} ({app[4]} –ª–µ—Ç)\n"
        keyboard.append([InlineKeyboardButton(
            f"#{app[0]} - {app[3]}", 
            callback_data=f"view_application_{app[0]}"
        )])
    
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")])
    
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

async def show_application_details(update: Update, context: ContextTypes.DEFAULT_TYPE, application_id: int):
    query = update.callback_query
    application = db.get_application(application_id)
    
    if not application:
        await query.edit_message_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_admin_keyboard())
        return
    
    status_emoji = "‚è≥" if application[8] == "pending" else "‚úÖ" if application[8] == "accepted" else "‚ùå"
    status_text = "–û–∂–∏–¥–∞–µ—Ç" if application[8] == "pending" else "–ü—Ä–∏–Ω—è—Ç–∞" if application[8] == "accepted" else "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞"
    
    text = f"""
{status_emoji} –ó–∞—è–≤–∫–∞ #{application[0]}

–ò–º—è: {application[3]}
–í–æ–∑—Ä–∞—Å—Ç: {application[4]}
–ù–∞–≤—ã–∫–∏: {application[5]}
–û–ø—ã—Ç –≤ —Å—Ç—É–¥–∏–∏: {application[6]}
–ü—Ä–µ–¥—ã–¥—É—â–∏–π –æ–ø—ã—Ç: {application[7]}
Username: @{application[2]}
User ID: {application[1]}
–°—Ç–∞—Ç—É—Å: {status_text}
–ü–æ–¥–∞–Ω–∞: {application[10]}
"""
    
    if application[9]:
        text += f"\n–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞: {application[9]}"
    
    await query.edit_message_text(text, reply_markup=get_application_action_keyboard(application_id))

async def accept_application(update: Update, context: ContextTypes.DEFAULT_TYPE, application_id: int):
    query = update.callback_query
    application = db.get_application(application_id)
    
    db.update_application_status(application_id, "accepted", "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!")
    
    try:
        await context.bot.send_message(
            application[1],
            f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{application_id} –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–ª –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ –ø—Ä–∏–Ω—è–ª –µ–µ.\n"
            "–° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!"
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    await context.bot.send_message(
        ADMIN_ID,
        f"–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É #{application_id} –æ—Ç @{application[2]}"
    )
    
    await query.edit_message_text(f"–ó–∞—è–≤–∫–∞ #{application_id} –ø—Ä–∏–Ω—è—Ç–∞!", reply_markup=get_admin_keyboard())

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    applications = db.get_all_applications()
    
    total = len(applications)
    pending = len([app for app in applications if app[8] == "pending"])
    accepted = len([app for app in applications if app[8] == "accepted"])
    rejected = len([app for app in applications if app[8] == "rejected"])
    
    text = f"""
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫:

–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total}
–û–∂–∏–¥–∞—é—Ç: {pending}
–ü—Ä–∏–Ω—è—Ç–æ: {accepted}
–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {rejected}
"""
    
    await query.edit_message_text(text, reply_markup=get_admin_keyboard())

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    
    if user_id in user_states:
        state = user_states[user_id]
        username = update.effective_user.username or "–ë–µ–∑ username"
        
        if state == "waiting_name":
            context.user_data['name'] = text
            user_states[user_id] = "waiting_age"
            await update.message.reply_text("2. –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?", reply_markup=get_cancel_keyboard())
        
        elif state == "waiting_age":
            try:
                age = int(text)
                if age < 14 or age > 100:
                    await update.message.reply_text("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 14 –¥–æ 100 –ª–µ—Ç.")
                    return
                context.user_data['age'] = age
                user_states[user_id] = "waiting_skills"
                await update.message.reply_text(
                    "3. –ß—Ç–æ –≤—ã —É–º–µ–µ—Ç–µ? (—Å–∫—Ä–∏–ø—Ç–∏–Ω–≥, –±–∏–ª–¥–∏–Ω–≥ –∏ —Ç.–¥.)",
                    reply_markup=get_cancel_keyboard()
                )
            except ValueError:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.")
        
        elif state == "waiting_skills":
            context.user_data['skills'] = text
            user_states[user_id] = "waiting_experience"
            await update.message.reply_text(
                "4. –°–∫–æ–ª—å–∫–æ –≤—ã —É–∂–µ –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å —Å—Ç—É–¥–∏–µ–π?",
                reply_markup=get_cancel_keyboard()
            )
        
        elif state == "waiting_experience":
            context.user_data['experience_years'] = text
            user_states[user_id] = "waiting_previous_experience"
            await update.message.reply_text(
                "5. –ë—ã–ª –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã? –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.",
                reply_markup=get_cancel_keyboard()
            )
        
        elif state == "waiting_previous_experience":
            context.user_data['previous_experience'] = text
            
            application_id = db.add_application(
                user_id=user_id,
                username=username,
                name=context.user_data['name'],
                age=context.user_data['age'],
                skills=context.user_data['skills'],
                experience_years=context.user_data['experience_years'],
                previous_experience=context.user_data['previous_experience']
            )
            
            application_text = f"""
–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{application_id}

–ò–º—è: {context.user_data['name']}
–í–æ–∑—Ä–∞—Å—Ç: {context.user_data['age']}
–ù–∞–≤—ã–∫–∏: {context.user_data['skills']}
–û–ø—ã—Ç –≤ —Å—Ç—É–¥–∏–∏: {context.user_data['experience_years']}
–ü—Ä–µ–¥—ã–¥—É—â–∏–π –æ–ø—ã—Ç: {context.user_data['previous_experience']}
Username: @{username}
User ID: {user_id}
"""
            
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"view_application_{application_id}")
            ]])
            
            await context.bot.send_message(ADMIN_ID, application_text, reply_markup=keyboard)
            
            del user_states[user_id]
            context.user_data.clear()
            
            await update.message.reply_text(
                "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!",
                reply_markup=get_main_menu_keyboard()
            )
    
    elif user_id == ADMIN_ID:
        for key in list(user_states.keys()):
            if key.startswith(f"reject_{user_id}"):
                application_id = user_states[key]
                application = db.get_application(application_id)
                
                db.update_application_status(application_id, "rejected", text)
                
                try:
                    await context.bot.send_message(
                        application[1],
                        f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{application_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n"
                        f"–ü—Ä–∏—á–∏–Ω–∞: {text}"
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                
                await context.bot.send_message(ADMIN_ID, f"–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É #{application_id}")
                
                del user_states[key]
                await update.message.reply_text(f"–ó–∞—è–≤–∫–∞ #{application_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.", reply_markup=get_admin_keyboard())
                return
            
            elif key.startswith(f"reply_{user_id}"):
                application_id = user_states[key]
                application = db.get_application(application_id)
                
                try:
                    await context.bot.send_message(
                        application[1],
                        f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É #{application_id}:\n\n{text}"
                    )
                    await update.message.reply_text(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{application[2]}")
                except Exception as e:
                    await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç: {e}")
                
                del user_states[key]
                return
    
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", reply_markup=get_main_menu_keyboard())

def main():
    TOKEN = "8490741720:AAGD6tYEzUtruUAOX4Mp2iOm0VwQHgtNiFc"
    
    application = Application.builder().token(TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin))
    
    application.add_handler(CallbackQueryHandler(handle_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()
